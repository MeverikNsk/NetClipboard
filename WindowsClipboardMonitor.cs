using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.Json;
using System.Threading;
using System.Windows.Forms;

namespace ClipboardMonitor
{
    /// <summary>
    /// Windows-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ö—É–∫–æ–≤
    /// </summary>
    public class WindowsClipboardMonitor : Form
    {
        private const int WM_CLIPBOARDUPDATE = 0x031D;
        private const int WM_DRAWCLIPBOARD = 0x0308;
        private const int WM_CHANGECBCHAIN = 0x030D;

        private Config _config;
        private Logger _logger;
        private IntPtr _nextClipboardViewer;
        private bool _isRunning;
        private int _clipboardUpdateCount;
        private DateTime _lastUpdateTime;

        [DllImport("user32.dll", SetLastError = true)]
        private static extern bool AddClipboardFormatListener(IntPtr hwnd);

        [DllImport("user32.dll", SetLastError = true)]
        private static extern bool RemoveClipboardFormatListener(IntPtr hwnd);

        [DllImport("user32.dll", SetLastError = true)]
        private static extern IntPtr SetClipboardViewer(IntPtr hWndNewViewer);

        [DllImport("user32.dll", SetLastError = true)]
        private static extern bool ChangeClipboardChain(IntPtr hWndRemove, IntPtr hWndNewNext);

        [DllImport("user32.dll", SetLastError = true)]
        private static extern IntPtr SendMessage(IntPtr hWnd, int Msg, IntPtr wParam, IntPtr lParam);

        [DllImport("user32.dll")]
        private static extern bool IsClipboardFormatAvailable(uint format);

        [DllImport("user32.dll")]
        private static extern bool OpenClipboard(IntPtr hWndNewOwner);

        [DllImport("user32.dll")]
        private static extern bool CloseClipboard();

        [DllImport("user32.dll")]
        private static extern IntPtr GetClipboardData(uint uFormat);

        [DllImport("kernel32.dll")]
        private static extern IntPtr GlobalLock(IntPtr hMem);

        [DllImport("kernel32.dll")]
        private static extern bool GlobalUnlock(IntPtr hMem);

        [DllImport("kernel32.dll")]
        private static extern IntPtr GlobalSize(IntPtr hMem);

        [DllImport("shell32.dll")]
        private static extern uint DragQueryFile(IntPtr hDrop, uint iFile, StringBuilder lpszFile, uint cch);

        [DllImport("gdi32.dll")]
        private static extern bool DeleteObject(IntPtr hObject);

        [DllImport("user32.dll")]
        private static extern uint EnumClipboardFormats(uint format);

        private const uint CF_TEXT = 1;
        private const uint CF_BITMAP = 2;
        private const uint CF_UNICODETEXT = 13;
        private const uint CF_HDROP = 15;
        private const uint CF_DIB = 8;

        public WindowsClipboardMonitor()
        {
            _config = new Config();
            _logger = new Logger(_config.LogFile);
            _clipboardUpdateCount = 0;
            _lastUpdateTime = DateTime.Now;

            // –°–æ–∑–¥–∞–µ–º –Ω–µ–≤–∏–¥–∏–º–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            this.WindowState = FormWindowState.Minimized;
            this.ShowInTaskbar = false;
            this.Visible = false;
            this.CreateHandle();

            // –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ –ø–∞–ø–∫–∏
            CreateOutputDirectories();

            _logger.Info("Windows Clipboard Monitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        }

        /// <summary>
        /// –°–æ–∑–¥–∞—Ç—å –≤—ã—Ö–æ–¥–Ω—ã–µ –ø–∞–ø–∫–∏
        /// </summary>
        private void CreateOutputDirectories()
        {
            try
            {
                string baseDir = Path.GetFullPath(_config.OutputDirectory);
                Directory.CreateDirectory(baseDir);
                Directory.CreateDirectory(Path.Combine(baseDir, "text"));
                Directory.CreateDirectory(Path.Combine(baseDir, "images"));
                Directory.CreateDirectory(Path.Combine(baseDir, "files"));

                _logger.Info($"–í—ã—Ö–æ–¥–Ω—ã–µ –ø–∞–ø–∫–∏ —Å–æ–∑–¥–∞–Ω—ã: {baseDir}");
            }
            catch (Exception ex)
            {
                _logger.Error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã—Ö–æ–¥–Ω—ã—Ö –ø–∞–ø–æ–∫", ex);
            }
        }

        /// <summary>
        /// –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
        /// </summary>
        public void StartMonitoring()
        {
            try
            {
                // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ (Windows Vista+)
                if (!AddClipboardFormatListener(this.Handle))
                {
                    _logger.Warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—å –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback");
                    // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π Windows
                    _nextClipboardViewer = SetClipboardViewer(this.Handle);
                }

                _isRunning = true;
                _logger.Info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ –∑–∞–ø—É—â–µ–Ω");

                ShowWelcomeMessage();

                // –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
                Application.Run(this);
            }
            catch (Exception ex)
            {
                _logger.Error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", ex);
                throw;
            }
        }

        /// <summary>
        /// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        /// </summary>
        public void StopMonitoring()
        {
            try
            {
                _isRunning = false;

                // –û—Ç–º–µ–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–ª—É—à–∞—Ç–µ–ª—è
                RemoveClipboardFormatListener(this.Handle);

                if (_nextClipboardViewer != IntPtr.Zero)
                {
                    ChangeClipboardChain(this.Handle, _nextClipboardViewer);
                }

                _logger.Info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                Application.Exit();
            }
            catch (Exception ex)
            {
                _logger.Error("–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", ex);
            }
        }

        /// <summary>
        /// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        /// </summary>
        private void ShowWelcomeMessage()
        {
            Console.Clear();
            Console.WriteLine("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
            Console.WriteLine("‚ïë            WINDOWS CLIPBOARD MONITOR –° –•–£–ö–ê–ú–ò               ‚ïë");
            Console.WriteLine("‚ïë                     –í–µ—Ä—Å–∏—è 2.0                              ‚ïë");
            Console.WriteLine("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
            Console.WriteLine();
            Console.WriteLine("‚îå‚îÄ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê");
            Console.WriteLine($"‚îÇ –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {_config.OutputDirectory.PadRight(37)} ‚îÇ");
            Console.WriteLine($"‚îÇ –§–∞–π–ª –ª–æ–≥–æ–≤: {_config.LogFile.PadRight(45)} ‚îÇ");
            Console.WriteLine($"‚îÇ –ú–∞–∫—Å. –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {_config.MaxTextLength} —Å–∏–º–≤–æ–ª–æ–≤{new string(' ', 20)} ‚îÇ");
            Console.WriteLine($"‚îÇ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {(_config.SaveImages ? "–í–∫–ª" : "–í—ã–∫–ª").PadRight(37)} ‚îÇ");
            Console.WriteLine($"‚îÇ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤: {(_config.SaveFiles ? "–í–∫–ª" : "–í—ã–∫–ª").PadRight(40)} ‚îÇ");
            Console.WriteLine("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò");
            Console.WriteLine();
            Console.WriteLine("‚îå‚îÄ –£–ü–†–ê–í–õ–ï–ù–ò–ï ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê");
            Console.WriteLine("‚îÇ Ctrl+C - –ó–∞–≤–µ—Ä—à–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥                              ‚îÇ");
            Console.WriteLine("‚îÇ –ò–∑–º–µ–Ω–µ–Ω–∏—è –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ            ‚îÇ");
            Console.WriteLine("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò");
            Console.WriteLine();
            Console.WriteLine("üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω! –ò–∑–º–µ–Ω–µ–Ω–∏—è –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ö—É–∫–∏...");
            Console.WriteLine();

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Ctrl+C
            Console.CancelKeyPress += (sender, e) =>
            {
                e.Cancel = true;
                Console.WriteLine("\n‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...");
                StopMonitoring();
            };
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π Windows
        /// </summary>
        protected override void WndProc(ref Message m)
        {
            try
            {
                switch (m.Msg)
                {
                    case WM_CLIPBOARDUPDATE:
                        // –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± (Windows Vista+)
                        OnClipboardChanged();
                        break;

                    case WM_DRAWCLIPBOARD:
                        // –°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± (Windows XP –∏ —Ä–∞–Ω–µ–µ)
                        OnClipboardChanged();
                        if (_nextClipboardViewer != IntPtr.Zero)
                        {
                            SendMessage(_nextClipboardViewer, m.Msg, m.WParam, m.LParam);
                        }
                        break;

                    case WM_CHANGECBCHAIN:
                        if (m.WParam == _nextClipboardViewer)
                        {
                            _nextClipboardViewer = m.LParam;
                        }
                        else if (_nextClipboardViewer != IntPtr.Zero)
                        {
                            SendMessage(_nextClipboardViewer, m.Msg, m.WParam, m.LParam);
                        }
                        break;
                }
            }
            catch (Exception ex)
            {
                _logger.Error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è Windows", ex);
            }

            base.WndProc(ref m);
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
        /// </summary>
        private void OnClipboardChanged()
        {
            if (!_isRunning) return;

            try
            {
                _clipboardUpdateCount++;
                _lastUpdateTime = DateTime.Now;

                var clipboardData = GetClipboardContent();
                if (clipboardData != null)
                {
                    SaveClipboardContent(clipboardData);

                    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
                    string info = clipboardData.Type switch
                    {
                        ClipboardDataType.Text => $"{clipboardData.OriginalLength} —Å–∏–º–≤–æ–ª–æ–≤",
                        ClipboardDataType.Image => $"{clipboardData.OriginalLength} –±–∞–π—Ç",
                        ClipboardDataType.Files => $"{clipboardData.OriginalLength} —Ñ–∞–π–ª–æ–≤",
                        _ => "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"
                    };
                    Console.WriteLine($"‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {clipboardData.Type} - {info} (–í—Å–µ–≥–æ: {_clipboardUpdateCount})");
                    _logger.Info($"–°–æ—Ö—Ä–∞–Ω–µ–Ω —ç–ª–µ–º–µ–Ω—Ç {clipboardData.Type}: {Path.GetFileName(clipboardData.FilePath)}");
                }
            }
            catch (Exception ex)
            {
                _logger.Error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞", ex);
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
        /// </summary>
        private ClipboardData? GetClipboardContent()
        {
            try
            {
                if (!OpenClipboard(this.Handle))
                {
                    _logger.Warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞");
                    return null;
                }

                try
                {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç Unicode
                    if (IsClipboardFormatAvailable(CF_UNICODETEXT))
                    {
                        IntPtr hData = GetClipboardData(CF_UNICODETEXT);
                        if (hData != IntPtr.Zero)
                        {
                            IntPtr pData = GlobalLock(hData);
                            if (pData != IntPtr.Zero)
                            {
                                try
                                {
                                    string text = Marshal.PtrToStringUni(pData);
                                    if (!string.IsNullOrEmpty(text))
                                    {
                                        return ClipboardData.CreateTextData(text, _config.MaxTextLength);
                                    }
                                }
                                finally
                                {
                                    GlobalUnlock(hData);
                                }
                            }
                        }
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                    if (IsClipboardFormatAvailable(CF_TEXT))
                    {
                        IntPtr hData = GetClipboardData(CF_TEXT);
                        if (hData != IntPtr.Zero)
                        {
                            IntPtr pData = GlobalLock(hData);
                            if (pData != IntPtr.Zero)
                            {
                                try
                                {
                                    string text = Marshal.PtrToStringAnsi(pData);
                                    if (!string.IsNullOrEmpty(text))
                                    {
                                        return ClipboardData.CreateTextData(text, _config.MaxTextLength);
                                    }
                                }
                                finally
                                {
                                    GlobalUnlock(hData);
                                }
                            }
                        }
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã (CF_HDROP)
                    if (_config.SaveFiles && IsClipboardFormatAvailable(CF_HDROP))
                    {
                        var fileData = GetClipboardFiles();
                        if (fileData != null)
                        {
                            return fileData;
                        }
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (CF_DIB)
                    if (_config.SaveImages && IsClipboardFormatAvailable(CF_DIB))
                    {
                        var imageData = GetClipboardImage();
                        if (imageData != null)
                        {
                            return imageData;
                        }
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º bitmap –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (CF_BITMAP)
                    if (_config.SaveImages && IsClipboardFormatAvailable(CF_BITMAP))
                    {
                        var bitmapData = GetClipboardBitmap();
                        if (bitmapData != null)
                        {
                            return bitmapData;
                        }
                    }

                    return null;
                }
                finally
                {
                    CloseClipboard();
                }
            }
            catch (Exception ex)
            {
                _logger.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞", ex);
                return null;
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª—ã –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
        /// </summary>
        private ClipboardData? GetClipboardFiles()
        {
            try
            {
                IntPtr hData = GetClipboardData(CF_HDROP);
                if (hData == IntPtr.Zero)
                    return null;

                IntPtr pData = GlobalLock(hData);
                if (pData == IntPtr.Zero)
                    return null;

                try
                {
                    var files = new List<string>();
                    uint fileCount = DragQueryFile(hData, 0xFFFFFFFF, null, 0);

                    for (uint i = 0; i < fileCount; i++)
                    {
                        var fileName = new StringBuilder(260);
                        if (DragQueryFile(hData, i, fileName, 260) > 0)
                        {
                            files.Add(fileName.ToString());
                        }
                    }

                    if (files.Count > 0)
                    {
                        var fileList = string.Join(Environment.NewLine, files);
                        return ClipboardData.CreateFileData(fileList, files.Count);
                    }
                }
                finally
                {
                    GlobalUnlock(hData);
                }
            }
            catch (Exception ex)
            {
                _logger.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞", ex);
            }

            return null;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ (CF_DIB)
        /// </summary>
        private ClipboardData? GetClipboardImage()
        {
            try
            {
                IntPtr hData = GetClipboardData(CF_DIB);
                if (hData == IntPtr.Zero)
                    return null;

                IntPtr pData = GlobalLock(hData);
                if (pData == IntPtr.Zero)
                    return null;

                try
                {
                    IntPtr size = GlobalSize(hData);
                    if (size == IntPtr.Zero)
                        return null;

                    // –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    var imageInfo = $"DIB –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ({size.ToInt32()} –±–∞–π—Ç)";
                    return ClipboardData.CreateImageData(imageInfo, size.ToInt32());
                }
                finally
                {
                    GlobalUnlock(hData);
                }
            }
            catch (Exception ex)
            {
                _logger.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è DIB –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞", ex);
            }

            return null;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å bitmap –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ (CF_BITMAP)
        /// </summary>
        private ClipboardData? GetClipboardBitmap()
        {
            try
            {
                IntPtr hBitmap = GetClipboardData(CF_BITMAP);
                if (hBitmap == IntPtr.Zero)
                    return null;

                // –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ bitmap
                var bitmapInfo = "Bitmap –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ";
                return ClipboardData.CreateImageData(bitmapInfo, 0);
            }
            catch (Exception ex)
            {
                _logger.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è bitmap –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞", ex);
            }

            return null;
        }

        /// <summary>
        /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
        /// </summary>
        private void SaveClipboardContent(ClipboardData data)
        {
            try
            {
                string timestamp = DateTime.Now.ToString("yyyyMMdd_HHmmss_fff");
                string subDir = data.Type switch
                {
                    ClipboardDataType.Text => "text",
                    ClipboardDataType.Image => "images",
                    ClipboardDataType.Files => "files",
                    _ => "unknown"
                };

                string fileName = data.GetFileName();
                string jsonFileName = data.GetMetadataFileName();

                string typeDir = Path.Combine(_config.OutputDirectory, subDir);
                string filePath = Path.Combine(typeDir, fileName);
                string jsonPath = Path.Combine(typeDir, jsonFileName);

                // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                Directory.CreateDirectory(typeDir);

                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                data.FilePath = filePath;

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
                var content = new StringBuilder();
                content.AppendLine($"–í—Ä–µ–º—è: {data.Timestamp:yyyy-MM-dd HH:mm:ss.fff}");
                content.AppendLine($"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Windows");
                content.AppendLine($"–¢–∏–ø: {data.Type}");

                switch (data.Type)
                {
                    case ClipboardDataType.Text:
                        content.AppendLine($"–î–ª–∏–Ω–∞: {data.OriginalLength} —Å–∏–º–≤–æ–ª–æ–≤");
                        break;
                    case ClipboardDataType.Image:
                        content.AppendLine($"–†–∞–∑–º–µ—Ä: {data.OriginalLength} –±–∞–π—Ç");
                        break;
                    case ClipboardDataType.Files:
                        content.AppendLine($"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: {data.OriginalLength}");
                        break;
                }

                content.AppendLine("–†–µ–∂–∏–º: –†–µ–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (—Ö—É–∫–∏)");
                content.AppendLine(new string('-', 50));
                content.AppendLine(data.Content);

                File.WriteAllText(filePath, content.ToString(), Encoding.UTF8);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                File.WriteAllText(jsonPath, data.ToJson(), Encoding.UTF8);

                _logger.Info($"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {fileName}");
            }
            catch (Exception ex)
            {
                _logger.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞", ex);
            }
        }

        /// <summary>
        /// –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
        /// </summary>
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                StopMonitoring();
            }
            base.Dispose(disposing);
        }
    }
}